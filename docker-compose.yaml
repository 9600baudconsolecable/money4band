#######################################################################
# File name : docker-compose.yml
# Author : MRColor
# This Docker-compose file use data from .env file
#######################################################################


services:

# EARNAPP CONTAINER
  earnapp:
    container_name: earnapp
    image: fazalfarhan01/earnapp:lite
    environment:
      - EARNAPP_UUID=$EARNAPP_DEVICE_UUID
    volumes:
      - earnapp-data:/etc/earnapp
    # network_mode: service:tun2socks
    restart: always

# HONEYGAIN CONTAINER
  honeygain:
    container_name: honeygain
    image: honeygain/honeygain:latest
    # network_mode: service:tun2socks
    environment:
      - HONEYGAIN_DUMMY=''
    command: -tou-accept -email $HONEYGAIN_EMAIL -pass $HONEYGAIN_PASSWD -device $DEVICE_NAME
    restart: always

# IPROYAL CONTAINER
  iproyal:
    container_name: iproyal
    image: iproyal/pawns-cli:latest
    environment:
      - IPROYALPAWNS_DUMMY=''
    command: -accept-tos -email=$IPROYALPAWNS_EMAIL -password=$IPROYALPAWNS_PASSWD -device-name=$DEVICE_NAME
    # network_mode: service:tun2socks
    restart: always

# PEER2PROFIT CONTAINER
  Peer2profit:
    container_name: peer2profit
    image: peer2profit/peer2profit_linux:latest
    environment:
      - P2P_EMAIL=$PEER2PROFIT_EMAIL
    # network_mode: service:tun2socks
    restart: always

# PACKETSTREAM CONTAINER
  Packetstream:
    container_name: packetstream
    image: packetstream/psclient:latest
    environment:
      - CID=$PACKETSTREAM_CID
    # network_mode: service:tun2socks
    restart: always

# TRAFFMONETIZER CONTAINER
  TraffMonetizer:
    container_name: traffmonetizer
    image: traffmonetizer/cli:latest
    environment:
      - TRAFFMONETIZER_DUMMY=''
    command: start accept status --token $TRAFFMONETIZER_TOKEN --device-name $DEVICE_NAME
    # network_mode: service:tun2socks
    restart: always

# REPOCKET CONTAINER
  Repocket:
    container_name: repocket
    image: repocket/repocket:latest
    environment:
        - RP_EMAIL=$REPOCKET_EMAIL
        - RP_API_KEY=$REPOCKET_APIKEY
    # network_mode: service:tun2socks
    restart: always

# PROXYRACK CONTAINER
  Proxyrack:
    container_name: proxyrack
    image: proxyrack/pop:latest
    environment:
        - pr_email=$PROXYRACK_EMAIL
        - api_key=$PROXYRACK_APIKEY
        - device_name=$DEVICE_NAME
    # network_mode: service:tun2socks
    restart: always

# BITPING CONTAINER 
 # !!For this app you'll need a one-time operation to claim your node: the first time if you do not have a backup of your identity you will need to enter manually your credentials to initialize it use : sudo docker run --rm -it -v ${PWD}/.data/.bitping/:/root/.bitping bitping/bitping-node:latest , then enter your credential , once this is done CTRL+C to end container and then if using bind folder just use docker compose to restart it as always, if you use the docker volume mount it in the previous comamnd or copy the created credentials in the volume using ' docker cp ${PWD}/.data/.bitping bitping:/root/' or just mount the volume in the interactive temporary container
  Bitping:
    container_name: bitping
    image: bitping/bitping-node:latest
    environment:
      - BITPING_DUMMY=''
    volumes:
      # You have 2 options
      - ./.data/.bitping:/root/.bitping # Bind an host folder to the container (more insecure but simplier to port and backup) this option mount a new identity or a backed up one from the host file system
      # OR
      #- bitping-data:/root/.bitping # if you use this also uncomment the relative volume in volumes section, this  Use docker volumes (more secure harder to access, backup and restore) you'll need to do backups using 'docker cp
    # network_mode: service:tun2socks
    restart: always

# TUN2SOCKS CONTAINER
  tun2socks:
    image: xjasonlyu/tun2socks
    container_name: tun2socks
    restart: always
    command: ["/bin/sh", "-c", "echo 'nameserver 1.1.1.1\nnameserver 8.8.8.8' > /etc/resolv.conf && ip rule add iif lo proto 17 dport 53 lookup main && ip rule add iif lo proto 17 dport 3478 lookup main"]
    environment:
      - LOGLEVEL=info
      - PROXY=$PROXY_STACK
    volumes:
      - '/dev/net/tun:/dev/net/tun'
    cap_add:
      - NET_ADMIN

# WATCHTOWER AUTO-UPDATER AND NOTIFICATIONS
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_POLL_INTERVAL=7200
      # - WATCHTOWER_NOTIFICATIONS=shoutrrr
      # - WATCHTOWER_NOTIFICATION_URL=$SHOUTRRR_URL
      # - WATCHTOWER_NOTIFICATIONS_HOSTNAME=$DEVICE_NAME
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_NO_STARTUP_MESSAGE=true
      - WATCHTOWER_CLEANUP=true
    restart: always
        
# WEB DASBOARD
  webdashboard:
    container_name: webdashboard
    image: fnichol/uhttpd:latest
    volumes:
      - ./www/Money4Band:/www
    ports:
      - 8081:80
    restart: always
        
volumes:
  earnapp-data:
  #bitping-data: # uncomment this if in bitping volumes you choose to use docker volumes instead of binding an host folder
